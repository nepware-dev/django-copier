import importlib

from pathlib import Path

from django.core.management.utils import get_random_secret_key
from environs import Env
from marshmallow.validate import OneOf

# Read .env file for environment variable
env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SERVER_ENVIRONMENT = env.str(
    "SERVER_ENVIRONMENT",
    validate=OneOf(choices=["development", "testing", "staging", "production"]),
    error="SERVER_ENVIRONMENT can only be one of {choices}",
)

# Is server secure server?
IS_SERVER_SECURE = SERVER_ENVIRONMENT in ["staging", "production"]

# Secret key for server
if IS_SERVER_SECURE:
    SECRET_KEY = env.str("DJANGO_SECRET_KEY", validate=lambda n: len(n) > 49)
else:
    SECRET_KEY = env.str(
        "DJANGO_SECRET_KEY",
        validate=lambda n: len(n) > 49,
        default=get_random_secret_key(),
    )

# Debug
if IS_SERVER_SECURE:
    DEBUG = False
else:
    DEBUG = True

# List of allowed hosts
DJANGO_ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[], subcast=str)
if IS_SERVER_SECURE:
    ALLOWED_HOSTS = DJANGO_ALLOWED_HOSTS
else:
    LOCAL_ALLOWED_HOSTS = ["0.0.0.0", "localhost", "127.0.0.1"]
    ALLOWED_HOSTS = LOCAL_ALLOWED_HOSTS + DJANGO_ALLOWED_HOSTS

# Application definition

# Apps which need to be before django default apps
BEFORE_DJANGO_APPS = []

# Django apps
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# Internal/Local apps
INTERNAL_APPS = []

# Third party apps
THIRD_PARTY_APPS = []

INSTALLED_APPS = BEFORE_DJANGO_APPS + DJANGO_APPS + INTERNAL_APPS + THIRD_PARTY_APPS

# Add django extensions to installed app if present
if importlib.util.find_spec("django_extensions"):
    INSTALLED_APPS.append("django_extensions")

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{ project_name }}.wsgi.application'

DATABASES = {
    "default": env.dj_db_url("DATABASE_URL", default="spatialite:///db.sqlite3")
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static and media locations√ü
STATIC_LOCATION = "static"
MEDIA_LOCATION = "media"
STATIC_URL = "/static/"
MEDIA_URL = "/media/"

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CELERY
ENABLE_CELERY = env.bool("ENABLE_CELERY", default=True)

if ENABLE_CELERY:
    CELERY_BROKER_TYPE = env.str(
        "CELERY_BROKER_TYPE",
        default="filesystem",
        validate=OneOf(choices=["redis", "filesystem"]),
        error="CELERY_BROKER_TYPE can only be one of {choices}",
    )

    if CELERY_BROKER_TYPE == "redis":
        CELERY_BROKER_URL = env.str("CELERY_BROKER_URL")
        CELERY_RESULT_BACKEND = CELERY_BROKER_URL
        if CELERY_BROKER_URL.startswith("rediss://"):
            CELERY_REDIS_BACKEND_USE_SSL = {"ssl_cert_reqs": "CERT_OPTIONAL"}

    if CELERY_BROKER_TYPE == "filesystem":
        CELERY_BROKER_URL = "filesystem://"
        CELERY_RESULT_BACKEND = "file:///tmp"
        CELERY_BROKER_TRANSPORT_OPTIONS = {
            "data_folder_in": "/tmp",
            "data_folder_out": "/tmp",
            "data_folder_processed": "/tmp",
        }

    CELERY_TIMEZONE = TIME_ZONE
    CELERY_WORKER_HIJACK_ROOT_LOGGER = False
    CELERY_WORKER_PREFETCH_MULTIPLIER = 1

