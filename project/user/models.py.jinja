from django.apps import apps
from django.conf import settings
from django.contrib.auth.models import AbstractUser
from django.core.validators import MaxLengthValidator, MinLengthValidator
from django.db import models
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from {{project_name}}.fields import LowerCharField, LowerEmailField
from {{project_name}}.models import TimeStampedModel

from .auth_validators import CustomASCIIUsernameValidator
from .managers import CustomUserManager
from .tasks import send_email_address_mail


class User(AbstractUser):
    username_validator = CustomASCIIUsernameValidator()

    # Abstract user modification
    username = LowerCharField(
        _("username"),
        max_length=30,
        unique=True,
        help_text=_(
            "Required. Length can be between 5 to 30. Letters, digits and ./-/_ only."
        ),
        validators=[
            username_validator,
            MinLengthValidator(limit_value=5),
        ],
        error_messages={
            "unique": _("A user with that username already exists."),
        },
    )
    email = LowerEmailField(
        _("email address"),
        unique=True,
        error_messages={
            "unique": _("A user with that email already exists."),
        },
    )
    objects = CustomUserManager()

    def email_user(self, subject, message, from_email=None, delay=True, **kwargs):
        if settings.ENABLE_CELERY and delay:
            send_email_address_mail.delay(
                self.email, subject, message, from_email=from_email, **kwargs
            )
        else:
            super(Model, self).email_user(subject, message, from_email=from_email, **kwargs)

    def notify(
        self,
        actor,
        verb,
        notification_type,
        timestamp=timezone.now(),
        action_object=None,
        target=None,
        description=None,
    ):
        """
        Create notification for user.
        Notifications are actually actions events, which are categorized by four main components.
        Actor. The object that performed the activity.
        Verb. The verb phrase that identifies the action of the activity.
        Action Object. (Optional) The object linked to the action itself.
        Target. (Optional) The object to which the activity was performed.
        Actor, Action Object and Target are GenericForeignKeys to any arbitrary Django object.
        An action is a description of an action that was performed (Verb) at some instant in time by some Actor on some
        optional Target that results in an Action Object getting created/updated/deleted
        Use '{actor} {verb} {action_object(optional)} on {target(optional)}' as description if description is not provided
        """
        if not description:
            extra_content = ""
            if action_object:
                extra_content += f" {action_object}"
            if target:
                extra_content += f" on {target}"

        description = f"{actor} {verb}{extra_content}"
        NotificationModel = apps.get_model("notification", "Notification")
        NotificationModel.objects.create(
            recipient=self,
            actor_content_object=actor,
            verb=verb,
            description=description,
            notification_type=notification_type,
            timestamp=timestamp,
            action_object_content_object=action_object,
            target_content_object=target,
        )


class PasswordResetPin(TimeStampedModel):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="password_reset_pin",
        verbose_name=_("user"),
    )
    no_of_incorrect_attempts = models.PositiveIntegerField(
        _("number of incorrect attempts"), default=0
    )
    pin = models.PositiveIntegerField(
        _("pin"), validators=[MinLengthValidator(6), MaxLengthValidator(6)]
    )
    pin_expiry_time = models.DateTimeField(_("pin expiry time"))
    is_active = models.BooleanField(_("active"), default=True)
    identifier = models.CharField(_("identifier"), max_length=16)


class EmailChangePin(TimeStampedModel):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="email_change_pin",
        verbose_name=_("user"),
    )
    no_of_incorrect_attempts = models.PositiveIntegerField(
        _("number of incorrect attempts"), default=0
    )
    pin = models.PositiveIntegerField(
        _("pin"), validators=[MinLengthValidator(6), MaxLengthValidator(6)]
    )
    pin_expiry_time = models.DateTimeField(_("pin expiry time"))
    new_email = LowerEmailField(_("new email"))
    is_active = models.BooleanField(_("active"), default=True)
